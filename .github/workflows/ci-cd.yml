name: Enterprise Auth CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r enterprise_auth/ -f json -o bandit-report.json
          bandit -r enterprise_auth/ -f txt

      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-report.json
          safety check

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json enterprise_auth/
          semgrep --config=auto enterprise_auth/

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/development.txt

      - name: Run Black code formatter check
        run: black --check --diff enterprise_auth/

      - name: Run isort import sorting check
        run: isort --check-only --diff enterprise_auth/

      - name: Run flake8 linting
        run: flake8 enterprise_auth/

      - name: Run mypy type checking
        run: mypy enterprise_auth/

      - name: Run pylint
        run: pylint enterprise_auth/

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_enterprise_auth
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/test.txt

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_enterprise_auth
          REDIS_URL: redis://localhost:6379/0
        run: |
          python manage.py migrate --settings=enterprise_auth.settings.test

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_enterprise_auth
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/unit/ -v --cov=enterprise_auth --cov-report=xml --cov-report=html --cov-fail-under=90

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_enterprise_auth
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v --cov=enterprise_auth --cov-append --cov-report=xml

      - name: Run API tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_enterprise_auth
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/api/ -v --cov=enterprise_auth --cov-append --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/test.txt
          pip install locust

      - name: Run performance tests
        run: |
          locust -f tests/performance/locustfile.py --headless --users 100 --spawn-rate 10 --run-time 5m --host http://localhost:8000

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: locust-report.html

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push main image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Celery image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.celery
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-celery:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://auth-staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|enterprise-auth:latest|${{ needs.build.outputs.image-tag }}|g" deployment/kubernetes/web-deployment.yaml
          sed -i "s|enterprise-auth-celery:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-celery:${{ github.sha }}|g" deployment/kubernetes/celery-deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment/kubernetes/namespace.yaml
          kubectl apply -f deployment/kubernetes/secrets.yaml
          kubectl apply -f deployment/kubernetes/configmap.yaml
          kubectl apply -f deployment/kubernetes/postgres.yaml
          kubectl apply -f deployment/kubernetes/redis.yaml
          kubectl apply -f deployment/kubernetes/web-deployment.yaml
          kubectl apply -f deployment/kubernetes/celery-deployment.yaml
          kubectl apply -f deployment/kubernetes/nginx-deployment.yaml
          kubectl apply -f deployment/kubernetes/hpa.yaml
          kubectl apply -f deployment/kubernetes/rbac.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/enterprise-auth-web -n enterprise-auth --timeout=600s
          kubectl rollout status deployment/enterprise-auth-celery-worker -n enterprise-auth --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Run basic health checks
          curl -f https://auth-staging.example.com/health/ || exit 1
          curl -f https://auth-staging.example.com/health/ready/ || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://auth.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Create database backup
        run: |
          kubectl exec -n enterprise-auth deployment/postgres -- /deployment/scripts/backup-database.sh

      - name: Deploy to production
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|enterprise-auth:latest|${{ needs.build.outputs.image-tag }}|g" deployment/kubernetes/web-deployment.yaml
          sed -i "s|enterprise-auth-celery:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-celery:${{ github.sha }}|g" deployment/kubernetes/celery-deployment.yaml
          
          # Apply Kubernetes manifests with rolling update
          kubectl apply -f deployment/kubernetes/configmap.yaml
          kubectl apply -f deployment/kubernetes/web-deployment.yaml
          kubectl apply -f deployment/kubernetes/celery-deployment.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/enterprise-auth-web -n enterprise-auth --timeout=600s
          kubectl rollout status deployment/enterprise-auth-celery-worker -n enterprise-auth --timeout=600s

      - name: Run production smoke tests
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Run comprehensive health checks
          curl -f https://auth.example.com/health/ || exit 1
          curl -f https://auth.example.com/health/ready/ || exit 1
          curl -f https://auth.example.com/api/v1/auth/providers || exit 1

      - name: Monitor deployment
        run: |
          # Monitor for 5 minutes after deployment
          for i in {1..10}; do
            echo "Health check $i/10"
            curl -f https://auth.example.com/health/ || exit 1
            sleep 30
          done

  # Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.event_name == 'release'
    environment:
      name: production
    steps:
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/enterprise-auth-web -n enterprise-auth
          kubectl rollout undo deployment/enterprise-auth-celery-worker -n enterprise-auth
          
          # Wait for rollback to complete
          kubectl rollout status deployment/enterprise-auth-web -n enterprise-auth --timeout=600s
          kubectl rollout status deployment/enterprise-auth-celery-worker -n enterprise-auth --timeout=600s

      - name: Verify rollback
        run: |
          curl -f https://auth.example.com/health/ || exit 1

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Clean up old images
        run: |
          # This would typically clean up old container images
          echo "Cleanup completed"