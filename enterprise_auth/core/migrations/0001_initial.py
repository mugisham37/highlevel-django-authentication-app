# Generated by Django 5.2.4 on 2025-08-04 08:44

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import enterprise_auth.core.models.base
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this user', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was deleted', null=True)),
                ('email', models.EmailField(help_text="User's email address (used as primary identifier)", max_length=254, unique=True, verbose_name='email address')),
                ('is_email_verified', models.BooleanField(default=False, help_text="Whether the user's email address has been verified")),
                ('email_verification_token', models.CharField(blank=True, help_text='Token for email verification (encrypted)', max_length=255, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, help_text='When the email verification was last sent', null=True)),
                ('phone_number', models.CharField(blank=True, help_text="User's phone number in international format", max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_phone_verified', models.BooleanField(default=False, help_text="Whether the user's phone number has been verified")),
                ('organization', models.CharField(blank=True, help_text='Organization or company name', max_length=255, null=True)),
                ('department', models.CharField(blank=True, help_text='Department within the organization', max_length=255, null=True)),
                ('employee_id', models.CharField(blank=True, help_text='Employee ID or identifier within the organization', max_length=100, null=True)),
                ('job_title', models.CharField(blank=True, help_text="User's job title or role", max_length=255, null=True)),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Account is locked until this timestamp', null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts')),
                ('last_password_change', models.DateTimeField(default=django.utils.timezone.now, help_text='When the password was last changed')),
                ('password_reset_token', models.CharField(blank=True, help_text='Token for password reset (encrypted)', max_length=255, null=True)),
                ('password_reset_sent_at', models.DateTimeField(blank=True, help_text='When the password reset was last sent', null=True)),
                ('profile_picture_url', models.URLField(blank=True, help_text="URL to user's profile picture", null=True)),
                ('timezone', models.CharField(default='UTC', help_text="User's preferred timezone", max_length=50)),
                ('language', models.CharField(default='en', help_text="User's preferred language", max_length=10)),
                ('terms_accepted_at', models.DateTimeField(blank=True, help_text='When the user accepted the terms of service', null=True)),
                ('privacy_policy_accepted_at', models.DateTimeField(blank=True, help_text='When the user accepted the privacy policy', null=True)),
                ('marketing_consent', models.BooleanField(default=False, help_text='Whether the user consents to marketing communications')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address of the last login', null=True)),
                ('last_login_user_agent', models.TextField(blank=True, help_text='User agent string from the last login', null=True)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'users_userprofile',
            },
            bases=(models.Model, enterprise_auth.core.models.base.EncryptedFieldMixin),
        ),
        migrations.CreateModel(
            name='UserIdentity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this identity', primary_key=True, serialize=False)),
                ('provider', models.CharField(choices=[('google', 'Google'), ('github', 'GitHub'), ('microsoft', 'Microsoft'), ('apple', 'Apple'), ('linkedin', 'LinkedIn'), ('facebook', 'Facebook'), ('twitter', 'Twitter'), ('custom', 'Custom OAuth Provider')], help_text='OAuth provider name', max_length=50)),
                ('provider_user_id', models.CharField(help_text='User ID from the OAuth provider', max_length=255)),
                ('provider_username', models.CharField(blank=True, help_text='Username from the OAuth provider', max_length=255, null=True)),
                ('provider_email', models.EmailField(blank=True, help_text='Email address from the OAuth provider', max_length=254, null=True)),
                ('provider_data', models.JSONField(default=dict, help_text='Additional data from the OAuth provider')),
                ('access_token', models.TextField(blank=True, help_text='Encrypted OAuth access token', null=True)),
                ('refresh_token', models.TextField(blank=True, help_text='Encrypted OAuth refresh token', null=True)),
                ('token_expires_at', models.DateTimeField(blank=True, help_text='When the access token expires', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('linked_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this identity was linked to the user')),
                ('last_used', models.DateTimeField(default=django.utils.timezone.now, help_text='When this identity was last used for authentication')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary identity for the provider')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this identity has been verified')),
                ('user', models.ForeignKey(help_text='User this identity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='identities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Identity',
                'verbose_name_plural': 'User Identities',
                'db_table': 'users_useridentity',
            },
            bases=(models.Model, enterprise_auth.core.models.base.EncryptedFieldMixin),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['email'], name='users_userp_email_98de9a_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['organization'], name='users_userp_organiz_dc3df3_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['department'], name='users_userp_departm_78b714_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['employee_id'], name='users_userp_employe_d67ad6_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['is_email_verified'], name='users_userp_is_emai_a8e5e0_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['is_phone_verified'], name='users_userp_is_phon_7d28ed_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['account_locked_until'], name='users_userp_account_de83e2_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['last_login'], name='users_userp_last_lo_a730ff_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['-created_at'], name='users_userp_created_bea041_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['is_deleted', '-created_at'], name='users_userp_is_dele_90684f_idx'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.UniqueConstraint(condition=models.Q(('employee_id__isnull', False), ('organization__isnull', False)), fields=('employee_id', 'organization'), name='unique_employee_per_org'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['user', 'provider'], name='users_useri_user_id_af3b10_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['provider', 'provider_user_id'], name='users_useri_provide_5cc9cb_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['provider_email'], name='users_useri_provide_1de880_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['is_primary'], name='users_useri_is_prim_476e13_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['is_verified'], name='users_useri_is_veri_eee13e_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['-last_used'], name='users_useri_last_us_f6c8ee_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['-linked_at'], name='users_useri_linked__992df9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='useridentity',
            unique_together={('provider', 'provider_user_id')},
        ),
    ]
