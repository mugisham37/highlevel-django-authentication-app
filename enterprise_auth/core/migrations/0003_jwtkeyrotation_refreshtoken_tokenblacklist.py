# Generated by Django 5.2.4 on 2025-08-04 10:32

import django.db.models.deletion
import django.utils.timezone
import enterprise_auth.core.models.base
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_add_audit_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='JWTKeyRotation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this key rotation record', primary_key=True, serialize=False)),
                ('key_id', models.CharField(help_text='Unique identifier for the JWT signing key', max_length=255, unique=True)),
                ('algorithm', models.CharField(default='RS256', help_text='Signing algorithm used with this key', max_length=20)),
                ('key_size', models.PositiveIntegerField(default=2048, help_text='Key size in bits')),
                ('activated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this key was activated')),
                ('rotated_at', models.DateTimeField(blank=True, help_text='When this key was rotated out', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('rotated', 'Rotated'), ('compromised', 'Compromised'), ('expired', 'Expired')], default='active', help_text='Current status of the key', max_length=20)),
                ('rotation_reason', models.CharField(blank=True, help_text='Reason for key rotation', max_length=255, null=True)),
                ('tokens_signed', models.PositiveIntegerField(default=0, help_text='Number of tokens signed with this key')),
                ('last_used', models.DateTimeField(blank=True, help_text='When this key was last used for signing', null=True)),
                ('rotated_by', models.ForeignKey(blank=True, help_text='User who initiated the key rotation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rotated_jwt_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'JWT Key Rotation',
                'verbose_name_plural': 'JWT Key Rotations',
                'db_table': 'jwt_key_rotation',
                'indexes': [models.Index(fields=['key_id'], name='jwt_key_rot_key_id_59e320_idx'), models.Index(fields=['status'], name='jwt_key_rot_status_6758eb_idx'), models.Index(fields=['activated_at'], name='jwt_key_rot_activat_9ad795_idx'), models.Index(fields=['rotated_at'], name='jwt_key_rot_rotated_eedc38_idx'), models.Index(fields=['-created_at'], name='jwt_key_rot_created_f4bfa9_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('rotated_at__isnull', True), ('rotated_at__gt', models.F('activated_at')), _connector='OR'), name='jwt_key_rotated_after_activated')],
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this refresh token', primary_key=True, serialize=False)),
                ('token_id', models.CharField(help_text='Unique token identifier from JWT claims', max_length=255, unique=True)),
                ('device_id', models.CharField(help_text='Unique device identifier', max_length=255)),
                ('device_fingerprint', models.CharField(help_text='Device fingerprint for binding', max_length=255)),
                ('device_type', models.CharField(blank=True, help_text='Type of device (mobile, desktop, tablet)', max_length=50, null=True)),
                ('browser', models.CharField(blank=True, help_text='Browser information', max_length=100, null=True)),
                ('operating_system', models.CharField(blank=True, help_text='Operating system information', max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address when token was created', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string when token was created', null=True)),
                ('scopes', models.JSONField(default=list, help_text='Scopes granted to this token')),
                ('session_id', models.CharField(blank=True, help_text='Associated session identifier', max_length=255, null=True)),
                ('issued_at', models.DateTimeField(help_text='When the token was issued')),
                ('expires_at', models.DateTimeField(help_text='When the token expires')),
                ('last_used', models.DateTimeField(blank=True, help_text='When the token was last used for refresh', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('rotated', 'Rotated'), ('revoked', 'Revoked'), ('expired', 'Expired')], default='active', help_text='Current status of the refresh token', max_length=20)),
                ('rotation_count', models.PositiveIntegerField(default=0, help_text='Number of times this token has been rotated')),
                ('revoked_at', models.DateTimeField(blank=True, help_text='When the token was revoked', null=True)),
                ('revocation_reason', models.CharField(blank=True, help_text='Reason for token revocation', max_length=255, null=True)),
                ('parent_token', models.ForeignKey(blank=True, help_text='Parent token if this is a rotated token', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_tokens', to='core.refreshtoken')),
                ('revoked_by', models.ForeignKey(blank=True, help_text='User who revoked this token', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='revoked_refresh_tokens', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User this refresh token belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='refresh_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Refresh Token',
                'verbose_name_plural': 'Refresh Tokens',
                'db_table': 'jwt_refresh_token',
                'indexes': [models.Index(fields=['token_id'], name='jwt_refresh_token_i_355179_idx'), models.Index(fields=['user', 'status'], name='jwt_refresh_user_id_0f7713_idx'), models.Index(fields=['device_id'], name='jwt_refresh_device__84d113_idx'), models.Index(fields=['device_fingerprint'], name='jwt_refresh_device__c2bb8f_idx'), models.Index(fields=['session_id'], name='jwt_refresh_session_4f4b3c_idx'), models.Index(fields=['expires_at'], name='jwt_refresh_expires_3a9b56_idx'), models.Index(fields=['status', 'expires_at'], name='jwt_refresh_status_57fbf1_idx'), models.Index(fields=['user', 'device_id', 'status'], name='jwt_refresh_user_id_ba2182_idx'), models.Index(fields=['-created_at'], name='jwt_refresh_created_161de5_idx'), models.Index(fields=['-last_used'], name='jwt_refresh_last_us_78f3f0_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('expires_at__gt', models.F('issued_at'))), name='refresh_token_expires_after_issued')],
            },
            bases=(models.Model, enterprise_auth.core.models.base.EncryptedFieldMixin),
        ),
        migrations.CreateModel(
            name='TokenBlacklist',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this blacklist entry', primary_key=True, serialize=False)),
                ('token_id', models.CharField(help_text='Unique token identifier from JWT claims', max_length=255, unique=True)),
                ('token_type', models.CharField(choices=[('access', 'Access Token'), ('refresh', 'Refresh Token')], help_text='Type of token that was blacklisted', max_length=20)),
                ('issued_at', models.DateTimeField(help_text='When the original token was issued')),
                ('expires_at', models.DateTimeField(help_text='When the original token expires')),
                ('blacklisted_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the token was blacklisted')),
                ('reason', models.CharField(choices=[('revoked', 'Manually Revoked'), ('rotated', 'Token Rotated'), ('security_incident', 'Security Incident'), ('user_logout', 'User Logout'), ('admin_action', 'Administrative Action'), ('expired', 'Token Expired'), ('suspicious_activity', 'Suspicious Activity')], default='revoked', help_text='Reason for blacklisting', max_length=50)),
                ('reason_details', models.TextField(blank=True, help_text='Additional details about the blacklisting reason', null=True)),
                ('device_id', models.CharField(blank=True, help_text='Device ID associated with the token', max_length=255, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address when token was blacklisted', null=True)),
                ('blacklisted_by', models.ForeignKey(blank=True, help_text='User who blacklisted this token', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blacklisted_tokens_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User this token belonged to', on_delete=django.db.models.deletion.CASCADE, related_name='blacklisted_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token Blacklist Entry',
                'verbose_name_plural': 'Token Blacklist Entries',
                'db_table': 'jwt_token_blacklist',
                'indexes': [models.Index(fields=['token_id'], name='jwt_token_b_token_i_41a9d0_idx'), models.Index(fields=['user', 'token_type'], name='jwt_token_b_user_id_84cb21_idx'), models.Index(fields=['expires_at'], name='jwt_token_b_expires_f64e8d_idx'), models.Index(fields=['blacklisted_at'], name='jwt_token_b_blackli_c5b572_idx'), models.Index(fields=['reason'], name='jwt_token_b_reason_445d49_idx'), models.Index(fields=['device_id'], name='jwt_token_b_device__ac77c9_idx'), models.Index(fields=['-created_at'], name='jwt_token_b_created_3b85c0_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('expires_at__gt', models.F('issued_at'))), name='blacklist_expires_after_issued'), models.CheckConstraint(condition=models.Q(('blacklisted_at__gte', models.F('issued_at'))), name='blacklist_after_issued')],
            },
        ),
    ]
