# Generated by Django 5.2.4 on 2025-08-04 13:46

import django.core.validators
import django.db.models.deletion
import enterprise_auth.core.models.base
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_jwtkeyrotation_refreshtoken_tokenblacklist'),
    ]

    operations = [
        migrations.CreateModel(
            name='MFADevice',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this MFA device', primary_key=True, serialize=False)),
                ('device_type', models.CharField(choices=[('totp', 'TOTP (Time-based One-Time Password)'), ('sms', 'SMS Verification'), ('email', 'Email Verification'), ('backup_codes', 'Backup Codes'), ('hardware_key', 'Hardware Security Key')], help_text='Type of MFA device', max_length=20)),
                ('device_name', models.CharField(help_text='User-friendly name for this device', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending Setup'), ('active', 'Active'), ('disabled', 'Disabled'), ('compromised', 'Compromised')], default='pending', help_text='Current status of the MFA device', max_length=20)),
                ('secret_key', models.TextField(blank=True, help_text='Encrypted TOTP secret key', null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number for SMS MFA (encrypted)', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email_address', models.EmailField(blank=True, help_text='Email address for email MFA', max_length=254, null=True)),
                ('backup_codes', models.TextField(blank=True, help_text='Encrypted backup codes as JSON array', null=True)),
                ('is_confirmed', models.BooleanField(default=False, help_text='Whether the device has been confirmed by the user')),
                ('last_used', models.DateTimeField(blank=True, help_text='When this device was last used for authentication', null=True)),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this device has been used')),
                ('created_ip', models.GenericIPAddressField(blank=True, help_text='IP address where this device was created', null=True)),
                ('created_user_agent', models.TextField(blank=True, help_text='User agent string when device was created', null=True)),
                ('last_used_ip', models.GenericIPAddressField(blank=True, help_text='IP address where this device was last used', null=True)),
                ('configuration', models.JSONField(default=dict, help_text='Device-specific configuration options')),
                ('user', models.ForeignKey(help_text='User this MFA device belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='mfa_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'MFA Device',
                'verbose_name_plural': 'MFA Devices',
                'db_table': 'auth_mfadevice',
            },
            bases=(models.Model, enterprise_auth.core.models.base.EncryptedFieldMixin),
        ),
        migrations.CreateModel(
            name='MFAAttempt',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this MFA attempt', primary_key=True, serialize=False)),
                ('result', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure'), ('expired', 'Expired'), ('rate_limited', 'Rate Limited'), ('device_disabled', 'Device Disabled')], help_text='Result of the MFA attempt', max_length=20)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the attempt')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string of the attempt', null=True)),
                ('session_id', models.CharField(blank=True, help_text='Session ID associated with the attempt', max_length=255, null=True)),
                ('failure_reason', models.CharField(blank=True, help_text='Reason for failure if applicable', max_length=100, null=True)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('user', models.ForeignKey(help_text='User who made the MFA attempt', on_delete=django.db.models.deletion.CASCADE, related_name='mfa_attempts', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(help_text='MFA device used for the attempt', on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='core.mfadevice')),
            ],
            options={
                'verbose_name': 'MFA Attempt',
                'verbose_name_plural': 'MFA Attempts',
                'db_table': 'auth_mfaattempt',
            },
        ),
        migrations.AddIndex(
            model_name='mfadevice',
            index=models.Index(fields=['user', 'device_type'], name='auth_mfadev_user_id_9e7fac_idx'),
        ),
        migrations.AddIndex(
            model_name='mfadevice',
            index=models.Index(fields=['user', 'status'], name='auth_mfadev_user_id_389a92_idx'),
        ),
        migrations.AddIndex(
            model_name='mfadevice',
            index=models.Index(fields=['device_type', 'status'], name='auth_mfadev_device__c7c815_idx'),
        ),
        migrations.AddIndex(
            model_name='mfadevice',
            index=models.Index(fields=['is_confirmed'], name='auth_mfadev_is_conf_fe7cad_idx'),
        ),
        migrations.AddIndex(
            model_name='mfadevice',
            index=models.Index(fields=['-last_used'], name='auth_mfadev_last_us_a54cc8_idx'),
        ),
        migrations.AddIndex(
            model_name='mfadevice',
            index=models.Index(fields=['-created_at'], name='auth_mfadev_created_3bab6e_idx'),
        ),
        migrations.AddConstraint(
            model_name='mfadevice',
            constraint=models.UniqueConstraint(fields=('user', 'device_name'), name='unique_device_name_per_user'),
        ),
        migrations.AddIndex(
            model_name='mfaattempt',
            index=models.Index(fields=['user', '-created_at'], name='auth_mfaatt_user_id_63302f_idx'),
        ),
        migrations.AddIndex(
            model_name='mfaattempt',
            index=models.Index(fields=['device', '-created_at'], name='auth_mfaatt_device__f227f9_idx'),
        ),
        migrations.AddIndex(
            model_name='mfaattempt',
            index=models.Index(fields=['result', '-created_at'], name='auth_mfaatt_result_017f2e_idx'),
        ),
        migrations.AddIndex(
            model_name='mfaattempt',
            index=models.Index(fields=['ip_address', '-created_at'], name='auth_mfaatt_ip_addr_802e1a_idx'),
        ),
        migrations.AddIndex(
            model_name='mfaattempt',
            index=models.Index(fields=['-created_at'], name='auth_mfaatt_created_114b3d_idx'),
        ),
    ]
