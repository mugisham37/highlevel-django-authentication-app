# Generated by Django 5.2.4 on 2025-08-05 06:07

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_add_mfa_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('device_fingerprint', models.CharField(db_index=True, help_text='Unique device fingerprint hash', max_length=255, unique=True)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet'), ('tv', 'Smart TV'), ('watch', 'Smart Watch'), ('unknown', 'Unknown')], default='unknown', help_text='Type of device', max_length=20)),
                ('browser', models.CharField(blank=True, help_text='Browser name and version', max_length=100)),
                ('operating_system', models.CharField(blank=True, help_text='Operating system name and version', max_length=100)),
                ('screen_resolution', models.CharField(blank=True, help_text='Screen resolution (e.g., 1920x1080)', max_length=20)),
                ('timezone_offset', models.IntegerField(blank=True, help_text='Timezone offset in minutes', null=True)),
                ('language', models.CharField(blank=True, help_text='Browser language preference', max_length=10)),
                ('user_agent', models.TextField(help_text='Full user agent string')),
                ('device_characteristics', models.JSONField(default=dict, help_text='Additional device characteristics for fingerprinting')),
                ('is_trusted', models.BooleanField(default=False, help_text='Whether this device is marked as trusted')),
                ('first_seen', models.DateTimeField(auto_now_add=True, help_text='When this device was first seen')),
                ('last_seen', models.DateTimeField(auto_now=True, help_text='When this device was last seen')),
            ],
            options={
                'verbose_name': 'Device Info',
                'verbose_name_plural': 'Device Info',
                'db_table': 'auth_device_info',
                'indexes': [models.Index(fields=['device_fingerprint'], name='auth_device_device__3d3142_idx'), models.Index(fields=['device_type', 'is_trusted'], name='auth_device_device__0674df_idx'), models.Index(fields=['last_seen'], name='auth_device_last_se_586ce8_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('session_id', models.CharField(db_index=True, help_text='Unique session identifier', max_length=255, unique=True)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the session')),
                ('country', models.CharField(blank=True, help_text='Country derived from IP geolocation', max_length=100)),
                ('region', models.CharField(blank=True, help_text='Region/state derived from IP geolocation', max_length=100)),
                ('city', models.CharField(blank=True, help_text='City derived from IP geolocation', max_length=100)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate', null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate', null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('isp', models.CharField(blank=True, help_text='Internet Service Provider', max_length=255)),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('terminated', 'Terminated'), ('suspicious', 'Suspicious'), ('locked', 'Locked')], db_index=True, default='active', help_text='Current session status', max_length=20)),
                ('login_method', models.CharField(choices=[('password', 'Password'), ('oauth_google', 'Google OAuth'), ('oauth_github', 'GitHub OAuth'), ('oauth_microsoft', 'Microsoft OAuth'), ('oauth_apple', 'Apple OAuth'), ('oauth_linkedin', 'LinkedIn OAuth'), ('mfa_totp', 'TOTP MFA'), ('mfa_sms', 'SMS MFA'), ('mfa_email', 'Email MFA'), ('api_key', 'API Key'), ('refresh_token', 'Refresh Token')], help_text='Method used for authentication', max_length=20)),
                ('risk_score', models.FloatField(default=0.0, help_text='Calculated risk score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('risk_factors', models.JSONField(default=dict, help_text='Detailed risk factors and their scores')),
                ('is_trusted_device', models.BooleanField(default=False, help_text='Whether this session is from a trusted device')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last activity timestamp')),
                ('expires_at', models.DateTimeField(help_text='Session expiration timestamp')),
                ('terminated_at', models.DateTimeField(blank=True, help_text='When the session was terminated', null=True)),
                ('termination_reason', models.CharField(blank=True, help_text='Reason for session termination', max_length=100)),
                ('session_data', models.JSONField(default=dict, help_text='Additional session-specific data')),
                ('device_info', models.ForeignKey(help_text='Device information for this session', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='core.deviceinfo')),
                ('terminated_by', models.ForeignKey(blank=True, help_text='User who terminated this session', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='terminated_sessions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User associated with this session', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'auth_user_session',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='SessionActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('api_call', 'API Call'), ('page_view', 'Page View'), ('password_change', 'Password Change'), ('profile_update', 'Profile Update'), ('mfa_setup', 'MFA Setup'), ('mfa_verify', 'MFA Verification'), ('oauth_link', 'OAuth Account Link'), ('oauth_unlink', 'OAuth Account Unlink'), ('permission_check', 'Permission Check'), ('suspicious_activity', 'Suspicious Activity')], help_text='Type of activity', max_length=30)),
                ('endpoint', models.CharField(blank=True, help_text='API endpoint or page accessed', max_length=255)),
                ('method', models.CharField(blank=True, help_text='HTTP method used', max_length=10)),
                ('status_code', models.IntegerField(blank=True, help_text='HTTP status code', null=True)),
                ('response_time_ms', models.IntegerField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent for this specific activity')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address for this specific activity', null=True)),
                ('activity_data', models.JSONField(default=dict, help_text='Additional activity-specific data')),
                ('risk_indicators', models.JSONField(default=list, help_text='Risk indicators detected during this activity')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this activity occurred')),
                ('session', models.ForeignKey(help_text='Session this activity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='core.usersession')),
            ],
            options={
                'verbose_name': 'Session Activity',
                'verbose_name_plural': 'Session Activities',
                'db_table': 'auth_session_activity',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'status'], name='auth_user_s_user_id_5508f9_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_id'], name='auth_user_s_session_25a3d5_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['ip_address', 'created_at'], name='auth_user_s_ip_addr_8180e9_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['device_info', 'status'], name='auth_user_s_device__7c61d8_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['risk_score'], name='auth_user_s_risk_sc_d778d5_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['last_activity'], name='auth_user_s_last_ac_b4f4ce_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['expires_at'], name='auth_user_s_expires_c416bc_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['country', 'city'], name='auth_user_s_country_0ef89a_idx'),
        ),
        migrations.AddIndex(
            model_name='sessionactivity',
            index=models.Index(fields=['session', 'timestamp'], name='auth_sessio_session_64c255_idx'),
        ),
        migrations.AddIndex(
            model_name='sessionactivity',
            index=models.Index(fields=['activity_type', 'timestamp'], name='auth_sessio_activit_3ecda7_idx'),
        ),
        migrations.AddIndex(
            model_name='sessionactivity',
            index=models.Index(fields=['endpoint'], name='auth_sessio_endpoin_55acc2_idx'),
        ),
        migrations.AddIndex(
            model_name='sessionactivity',
            index=models.Index(fields=['status_code'], name='auth_sessio_status__4d0b8a_idx'),
        ),
    ]
