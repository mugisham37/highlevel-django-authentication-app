# Generated by Django 5.2.4 on 2025-08-05 07:38

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_create_session_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='SecurityEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('event_id', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Unique event identifier', unique=True)),
                ('event_type', models.CharField(choices=[('login_attempt', 'Login Attempt'), ('login_success', 'Login Success'), ('login_failure', 'Login Failed'), ('logout', 'Logout'), ('password_change', 'Password Change'), ('password_reset', 'Password Reset'), ('session_created', 'Session Created'), ('session_terminated', 'Session Terminated'), ('session_expired', 'Session Expired'), ('session_hijack_attempt', 'Session Hijack Attempt'), ('concurrent_session_limit', 'Concurrent Session Limit'), ('session_sharing_detected', 'Session Sharing Detected'), ('mfa_setup', 'MFA Setup'), ('mfa_verification', 'MFA Verification'), ('mfa_failure', 'MFA Failure'), ('mfa_bypass_attempt', 'MFA Bypass Attempt'), ('suspicious_login', 'Suspicious Login'), ('impossible_travel', 'Impossible Travel'), ('device_anomaly', 'Device Anomaly'), ('location_anomaly', 'Location Anomaly'), ('behavioral_anomaly', 'Behavioral Anomaly'), ('brute_force_attack', 'Brute Force Attack'), ('credential_stuffing', 'Credential Stuffing'), ('rate_limit_exceeded', 'Rate Limit Exceeded'), ('rate_limit_warning', 'Rate Limit Warning'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('account_disabled', 'Account Disabled'), ('account_enabled', 'Account Enabled'), ('api_abuse', 'API Abuse'), ('invalid_token', 'Invalid Token'), ('token_theft_attempt', 'Token Theft Attempt'), ('security_scan_detected', 'Security Scan Detected'), ('malicious_payload', 'Malicious Payload'), ('injection_attempt', 'Injection Attempt')], db_index=True, help_text='Type of security event', max_length=50)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], db_index=True, default='low', help_text='Event severity level', max_length=20)),
                ('status', models.CharField(choices=[('new', 'New'), ('investigating', 'Investigating'), ('confirmed', 'Confirmed'), ('false_positive', 'False Positive'), ('resolved', 'Resolved'), ('ignored', 'Ignored')], db_index=True, default='new', help_text='Investigation status', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address where event originated', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('request_id', models.CharField(blank=True, db_index=True, help_text='Request correlation ID', max_length=255)),
                ('title', models.CharField(help_text='Brief event title', max_length=255)),
                ('description', models.TextField(help_text='Detailed event description')),
                ('risk_score', models.FloatField(default=0.0, help_text='Calculated risk score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('threat_indicators', models.JSONField(default=list, help_text='List of threat indicators detected')),
                ('confidence_score', models.FloatField(default=0.0, help_text='Confidence in threat detection (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('event_data', models.JSONField(default=dict, help_text='Additional event-specific data')),
                ('detection_method', models.CharField(blank=True, help_text='Method used to detect this event', max_length=100)),
                ('response_taken', models.BooleanField(default=False, help_text='Whether automated response was taken')),
                ('response_details', models.JSONField(default=dict, help_text='Details of response actions taken')),
                ('mitigation_applied', models.BooleanField(default=False, help_text='Whether mitigation measures were applied')),
                ('investigated_at', models.DateTimeField(blank=True, help_text='When investigation was completed', null=True)),
                ('investigation_notes', models.TextField(blank=True, help_text='Investigation notes and findings')),
                ('correlation_id', models.CharField(blank=True, db_index=True, help_text='ID for correlating related events', max_length=255)),
                ('investigated_by', models.ForeignKey(blank=True, help_text='User who investigated this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigated_security_events', to=settings.AUTH_USER_MODEL)),
                ('parent_event', models.ForeignKey(blank=True, help_text='Parent event if this is a follow-up', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_events', to='core.securityevent')),
                ('session', models.ForeignKey(blank=True, help_text='Session associated with this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_events', to='core.usersession')),
                ('user', models.ForeignKey(blank=True, help_text='User associated with this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Event',
                'verbose_name_plural': 'Security Events',
                'db_table': 'security_event',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['event_type', 'severity'], name='security_ev_event_t_eafd68_idx'), models.Index(fields=['user', 'created_at'], name='security_ev_user_id_4a2b55_idx'), models.Index(fields=['session', 'created_at'], name='security_ev_session_98b620_idx'), models.Index(fields=['ip_address', 'created_at'], name='security_ev_ip_addr_78dcc2_idx'), models.Index(fields=['risk_score'], name='security_ev_risk_sc_97ae48_idx'), models.Index(fields=['status', 'severity'], name='security_ev_status_dbe83f_idx'), models.Index(fields=['correlation_id'], name='security_ev_correla_0a53b5_idx'), models.Index(fields=['created_at'], name='security_ev_created_ca8d45_idx')],
            },
        ),
        migrations.CreateModel(
            name='SessionSecurityEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('event_type', models.CharField(choices=[('session_anomaly', 'Session Anomaly'), ('suspicious_activity', 'Suspicious Activity'), ('location_change', 'Location Change'), ('device_change', 'Device Change'), ('concurrent_session', 'Concurrent Session'), ('session_sharing', 'Session Sharing'), ('impossible_travel', 'Impossible Travel'), ('risk_threshold_exceeded', 'Risk Threshold Exceeded'), ('behavioral_anomaly', 'Behavioral Anomaly'), ('session_hijack', 'Session Hijack'), ('session_replay', 'Session Replay')], db_index=True, help_text='Type of session security event', max_length=30)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], db_index=True, default='low', help_text='Risk level of this event', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of the security event')),
                ('risk_score', models.FloatField(default=0.0, help_text='Risk score for this specific event', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('detection_algorithm', models.CharField(blank=True, help_text='Algorithm or method used for detection', max_length=100)),
                ('confidence_level', models.FloatField(default=0.0, help_text='Confidence level in detection (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('previous_session_data', models.JSONField(default=dict, help_text='Previous session data for comparison')),
                ('current_session_data', models.JSONField(default=dict, help_text='Current session data that triggered the event')),
                ('anomaly_indicators', models.JSONField(default=list, help_text='Specific indicators that triggered the anomaly detection')),
                ('action_taken', models.CharField(blank=True, help_text='Automated action taken in response', max_length=100)),
                ('action_details', models.JSONField(default=dict, help_text='Details of the action taken')),
                ('requires_manual_review', models.BooleanField(default=False, help_text='Whether this event requires manual review')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When this event was reviewed', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Notes from manual review')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who reviewed this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_session_events', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(help_text='Session this security event relates to', on_delete=django.db.models.deletion.CASCADE, related_name='session_security_events', to='core.usersession')),
            ],
            options={
                'verbose_name': 'Session Security Event',
                'verbose_name_plural': 'Session Security Events',
                'db_table': 'session_security_event',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['session', 'event_type'], name='session_sec_session_c44898_idx'), models.Index(fields=['risk_level', 'created_at'], name='session_sec_risk_le_1fb998_idx'), models.Index(fields=['requires_manual_review'], name='session_sec_require_1afdf5_idx'), models.Index(fields=['reviewed_at'], name='session_sec_reviewe_21018f_idx'), models.Index(fields=['risk_score'], name='session_sec_risk_sc_73ea87_idx')],
            },
        ),
        migrations.CreateModel(
            name='ThreatIntelligence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('indicator_type', models.CharField(choices=[('ip_address', 'IP Address'), ('user_agent', 'User Agent'), ('domain', 'Domain'), ('hash', 'Hash'), ('pattern', 'Pattern'), ('behavior', 'Behavior')], db_index=True, help_text='Type of threat indicator', max_length=20)),
                ('indicator_value', models.TextField(db_index=True, help_text='Value of the threat indicator')),
                ('threat_type', models.CharField(help_text='Type of threat this indicator represents', max_length=100)),
                ('source', models.CharField(choices=[('internal', 'Internal Analysis'), ('external_feed', 'External Threat Feed'), ('manual_entry', 'Manual Entry'), ('ml_detection', 'Machine Learning Detection'), ('community', 'Community Intelligence')], help_text='Source of this threat intelligence', max_length=20)),
                ('confidence', models.CharField(choices=[('low', 'Low Confidence'), ('medium', 'Medium Confidence'), ('high', 'High Confidence'), ('verified', 'Verified')], default='medium', help_text='Confidence level in this indicator', max_length=20)),
                ('description', models.TextField(help_text='Description of the threat')),
                ('severity_score', models.FloatField(default=0.0, help_text='Severity score of this threat (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('tags', models.JSONField(default=list, help_text='Tags for categorizing this threat intelligence')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata about this threat')),
                ('first_seen', models.DateTimeField(auto_now_add=True, help_text='When this indicator was first seen')),
                ('last_seen', models.DateTimeField(auto_now=True, help_text='When this indicator was last seen')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this indicator expires', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this indicator is currently active')),
                ('added_by', models.ForeignKey(blank=True, help_text='User who added this threat intelligence', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_threat_intelligence', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Threat Intelligence',
                'verbose_name_plural': 'Threat Intelligence',
                'db_table': 'threat_intelligence',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['indicator_type', 'indicator_value'], name='threat_inte_indicat_661a97_idx'), models.Index(fields=['threat_type'], name='threat_inte_threat__fab55c_idx'), models.Index(fields=['source', 'confidence'], name='threat_inte_source_8151bc_idx'), models.Index(fields=['is_active', 'expires_at'], name='threat_inte_is_acti_2cc36c_idx'), models.Index(fields=['severity_score'], name='threat_inte_severit_c54e37_idx')],
                'unique_together': {('indicator_type', 'indicator_value')},
            },
        ),
    ]
